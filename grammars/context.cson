fileTypes: [
  "tex", "ctx",
  "mkii", "mkiv", "mkvi",
]
name: "ConTeXt"
patterns: [
  # math mode support
  {
    begin: "\\$"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.tex"
    end: "\\$"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.tex"
    name: "string.other.math.tex"
    patterns: [
      {
        match: "\\\\\\$"
        name: "constant.character.escape.tex"
      }
      {
        match: "(\\\\label)\\{([a-zA-Z]*)\\}"
        captures:
          "1":
            name: "keyword.control.label.context"
          "2":
            name: "support.variable.enviromnent.context"
      }
      {
        include: "text.tex.math"
      }
      {
        include: "$self"
      }
    ]
  }
  {
    match: "(\\\\)[^a-zA-Z@]"
    captures:
      "1":
        name: "punctuation.definition.keyword.tex"
    name: "constant.character.escape.tex"
  }
  {
    match: "(%).*$\\n?"
    captures:
      "2":
        name: "punctuation.definition.comment.tex"
    name: "comment.line.percentage.tex"
  }
  {
    begin: "\\\\startformula"
    beginCaptures:
      "0":
        name: "support.function.general.tex"
    end: "\\\\stopformula"
    endCaptures:
      "0":
        name: "support.function.general.tex"
    name: "string.other.math.tex"
    patterns: [
      {
        match: "\\\\\\$"
        name: "constant.character.escape.tex"
      }
      {
        match: "(\\\\label)\\{([a-zA-Z]*)\\}"
        captures:
          "1":
            name: "keyword.control.label.context"
          "2":
            name: "support.variable.enviromnent.context"
      }
      {
        include: "text.tex.math"
      }
      {
        include: "$self"
      }
    ]
  }
  {
    captures:
      "1":
        name: "punctuation.definition.keyword.tex"
    match: "(\\\\)[^a-zA-Z@]"
    name: "constant.character.escape.tex"
  }
  {
    captures:
      "2":
        name: "punctuation.definition.comment.tex"
    match: "(%).*$\\n?"
    name: "comment.line.percentage.tex"
  }
  # ref special coloring support
  {
    match: "(\\\\ref|\\\\eqref)\\{([a-zA-Z]*)\\}"
    captures:
      "1":
        name: "keyword.control.label.context"
      "2":
        name: "support.variable.enviromnent.context"
  }
  {
    match: "(\\\\placeformula)\\[([a-z]*)\\]"
    captures:
      "1":
        name: "support.function.it.context"
      "2":
        name: "support.variable.enviromnent.context"
  }
  # italic / bold support
  {
    begin: "(\\{\\\\it\\s+)"
    captures:
      "1":
        name: "support.function.it.context"
    comment: "stolen from LaTeX"
    contentName: "markup.italic.context"
    end: "(\\})"
    name: "meta.it.context"
    patterns: [
      {
        include: "text.tex.context"
      }
    ]
  }
  {
    begin: "(\\{\\\\bf\\s+)"
    captures:
      "1":
        name: "support.function.bf.context"
    comment: '''
      We put the keyword in a capture and name this capture, so that disabling spell checking for “keyword” won't be inherited by the argument to {\\bf...}.

      Put specific matches for particular ConTeXt keyword.functions before the last two more general functions
    '''
    contentName: "markup.bold.context"
    end: "(\\})"
    name: "meta.bf.context"
    patterns: [
      {
        include: "text.tex.context"
      }
    ]
  }
  {
    begin: "(\\{\\\\bi\\s+)"
    captures:
      "1":
        name: "support.function.bi.context"
    comment: '''
      We put the keyword in a capture and name this capture, so that disabling spell checking for “keyword” won't be inherited by the argument to {\\bi...}.

      Put specific matches for particular ConTeXt keyword.functions before the last two more general functions
    '''
    contentName: "markup.bold.italic.context"
    end: "(\\})"
    name: "meta.bi.context"
    patterns: [
      {
        include: "text.tex.context"
      }
    ]
  }
  # metafun support
  {
    begin: "(\\\\start(unique|use|reusable)?MP)(code|inclusions|graphic)"
    captures:
      "0":
        name: "support.function.document.context"
    end: "(\\\\stop\\2MP)(\\3)"
    name: "meta.scope.tex.metafun"
    patterns: [
      {
        include: "source.metafun"
      }
    ]
  }
  # lua support
  {
    begin: "(\\\\startlua(code)?)"
    captures:
      "0":
        name: "support.function.document.context"
    end: "(\\\\stoplua(code)?)"
    name: "meta.scope.lua"
    patterns: [
      {
        include: "source.lua"
      }
    ]
  }
  {
    begin: "(\\\\ctxlua\\s*){"
    captures:
      "0":
        name: "support.function.document.context"
    end: "}"
    name: "meta.scope.lua"
    patterns: [
      {
        include: "source.lua"
      }
    ]
  }
  {
    match: "\\\\starttext\\W"
    captures:
      "0":
        name: "support.function.document.context"
    name: "meta.context.starttext"
  }
  {
    match: "\\\\stoptext\\W"
    captures:
      "0":
        name: "support.function.document.context"
    name: "meta.context.stoptext"
  }
  {
    begin: "\\["
    end: "\\]"
    name: "meta.context.group.arguments"
    patterns: [
      {
        begin: "([a-z,A-Z]+)\\s*="
        captures:
          "1":
            name: "support.variable.enviromnent.context"
        end: ","
        patterns: [
          {
            include: "text.tex.context"
          }
        ]
      }
      {
        include: "text.tex.context"
      }
    ]
  }
  {
    match: "\\\\[a-zA-Z]*"
    name: "support.function.general.tex"
  }
]
scopeName: "text.tex.context"
